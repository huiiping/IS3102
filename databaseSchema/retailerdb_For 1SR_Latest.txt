
CREATE TABLE cust_membership_tiers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tier_name VARCHAR(255) NOT NULL,
    validity_period INT NOT NULL,
    min_spending VARCHAR(100),
    membership_fee VARCHAR(100),
    membership_pts INT,
    redemption_pts INT,
    discount_rate VARCHAR(100),
    birthday_rate VARCHAR(100),
    description TEXT, 
    created DATETIME,
    modified DATETIME
);

CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    member_identification VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    dob DATE NOT NULL,
    address VARCHAR(255) NOT NULL,
    contact VARCHAR(100) NOT NULL,
    created DATETIME,
    modified DATETIME,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    activation_status VARCHAR(100),
    activation_token VARCHAR(100),
    mailing_list BOOLEAN,
    expiry_date DATETIME,
    preferred_currency VARCHAR(100),
    cust_membership_tier_id INT,
    FOREIGN KEY (cust_membership_tier_id) REFERENCES cust_membership_tiers(id)
);

CREATE TABLE locations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    address VARCHAR(255),
    contact VARCHAR(100),
    type VARCHAR(100)
);

CREATE TABLE retailer_details (
    retailerid INT PRIMARY KEY,
    retailer_name VARCHAR(255) NOT NULL,
    retailer_desc TEXT,
    retailer_email VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL,
    contact VARCHAR(100) NOT NULL,
    logo_name VARCHAR(255),
    logo_path VARCHAR(255)
);

CREATE TABLE retailer_employee_roles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(255) NOT NULL,
    role_desc TEXT
);

CREATE TABLE retailer_employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL,
    contact VARCHAR(100) NOT NULL,
    created DATETIME,
    modified DATETIME,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    activation_status VARCHAR(100),
    activation_token VARCHAR(100),
    location_id INT,
    profile_pic_name VARCHAR(255),
    profile_pic_path VARCHAR(255),
    FOREIGN KEY (location_id) REFERENCES locations(id)
);

CREATE TABLE suppliers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL,
    contact VARCHAR(100) NOT NULL,
    created DATETIME,
    modified DATETIME,
    supplier_name VARCHAR(255) UNIQUE,
    country VARCHAR(255),
    activation_status VARCHAR(100),
    activation_token VARCHAR(100),
    bank_acc VARCHAR(255)
);

CREATE TABLE supplier_memos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    remarks VARCHAR(255),
    created DATETIME,
    supplier_id INT,
    retailer_employee_id INT,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(id),
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id)
);

CREATE TABLE messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255),
    created DATETIME,
    modified DATETIME,
    message TEXT,
    status BOOLEAN,
    attachment VARCHAR(100),
    attachmentID INT,
    sender_id INT,
    FOREIGN KEY (sender_id) REFERENCES retailer_employees(id)
);

CREATE TABLE promotions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    start_date DATETIME,
    end_date DATETIME,
    promo_name VARCHAR(255) UNIQUE NOT NULL,
    promo_desc TEXT NOT NULL,
    first_voucher_num VARCHAR(100),
    last_voucher_num VARCHAR(100),
    discount_rate DOUBLE,
    credit_card_type VARCHAR(100),
    img_name VARCHAR(255),
    img_path VARCHAR(255),
    retailer_employee_id INT,
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id)
);

CREATE TABLE purchase_orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    created DATETIME,
    total_price DOUBLE,
    approval_status VARCHAR(100),
    delivery_status BOOLEAN,
    requisitioner INT, 
    tax DOUBLE, 
    shipping_cost DOUBLE,
    other_cost DOUBLE, 
    ship_via VARCHAR(255),
    subtotal DOUBLE,
    fob VARCHAR(100),
    comments VARCHAR(255),
    shipping_terms VARCHAR(255),
    is_sent BOOLEAN,
    recurring_supplier VARCHAR(255),
    recurring_retailer VARCHAR(255),
    supplier_id INT NOT NULL,
    location_id INT,
    FOREIGN KEY (location_id) REFERENCES locations(id),    
    FOREIGN KEY (supplier_id) REFERENCES suppliers(id),
    FOREIGN KEY (requisitioner) REFERENCES retailer_employees(id)
);

CREATE TABLE purchase_order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    itemID INT NOT NULL,
    description VARCHAR(255) NOT NULL,
    quantity INT NOT NULL,
    unit_price DOUBLE NOT NULL,
    purchase_order_id INT,
    FOREIGN KEY (purchase_order_id) REFERENCES purchase_orders(id)
);

CREATE TABLE sections (
    id INT AUTO_INCREMENT PRIMARY KEY,
    sec_name VARCHAR(100),
    available_space INT NOT NULL,
    space_limit INT,
    reserve_space INT,
    location_id INT,
    FOREIGN KEY (location_id) REFERENCES locations(id)
);

CREATE TABLE prod_cats (
    id INT AUTO_INCREMENT PRIMARY KEY,
    parentid INT,
    cat_name VARCHAR(100) UNIQUE NOT NULL,
    cat_desc TEXT,
    FOREIGN KEY (parentid) REFERENCES prod_cats(id)
);

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    prod_name VARCHAR(100) UNIQUE NOT NULL,
    prod_desc TEXT NOT NULL ,
    store_unit_price DOUBLE,
    web_store_unit_price DOUBLE,
    SKU VARCHAR(100) UNIQUE NOT NULL,
    barcode VARCHAR(255),
    prod_cat_id INT NOT NULL,
    FOREIGN KEY (prod_cat_id) REFERENCES prod_cats(id)
);

CREATE TABLE prod_specifications (  
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL
);

CREATE TABLE promotion_emails (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    body VARCHAR(255),
    created DATETIME
);

CREATE TABLE promotions_promotion_emails (
    promotion_id INT NOT NULL,
    promotion_email_id INT NOT NULL,
    PRIMARY KEY (promotion_id, promotion_email_id),
    FOREIGN KEY (promotion_id) REFERENCES promotions(id),
    FOREIGN KEY (promotion_email_id) REFERENCES promotion_emails(id)
);

CREATE TABLE retailer_loggings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    action VARCHAR(100),
    entity VARCHAR(100),
    entityid INT,
    retailer_employee_id INT NOT NULL,
    created DATETIME,
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id)
);

CREATE TABLE cust_membership_tiers_promotions (
    cust_membership_tier_id INT NOT NULL,
    promotion_id INT NOT NULL,
    PRIMARY KEY (cust_membership_tier_id, promotion_id),
    FOREIGN KEY (cust_membership_tier_id) REFERENCES cust_membership_tiers(id),
    FOREIGN KEY (promotion_id) REFERENCES promotions(id)
);

CREATE TABLE retailer_employees_retailer_employee_roles (
    retailer_employee_id INT NOT NULL,
    retailer_employee_role_id INT NOT NULL,
    PRIMARY KEY (retailer_employee_id, retailer_employee_role_id),
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id),
    FOREIGN KEY (retailer_employee_role_id) REFERENCES retailer_employee_roles(id)
);

CREATE TABLE retailer_employees_messages (
    retailer_employee_id INT NOT NULL,
    message_id INT NOT NULL,
    PRIMARY KEY (retailer_employee_id, message_id),
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id),
    FOREIGN KEY (message_id) REFERENCES messages(id)
);

CREATE TABLE promotions_products (
    promotion_id INT NOT NULL,
    product_id INT NOT NULL,
    PRIMARY KEY (promotion_id, product_id),
    FOREIGN KEY (promotion_id) REFERENCES promotions(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE products_prod_specifications (
    product_id INT NOT NULL,
    prod_specification_id INT NOT NULL,
    PRIMARY KEY (product_id, prod_specification_id),
    FOREIGN KEY (product_id) REFERENCES products(id),
    FOREIGN KEY (prod_specification_id) REFERENCES prod_specifications(id)
);

CREATE TABLE transactions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    status VARCHAR(100),
    remarks VARCHAR(255),
    receipt_number INT,
    customer_id INT,
    retailer_employee_id INT,
    location_id INT,
    gross_amount double,
    nett_amount double,
    member_discount double,
    other_discount double,
    modified DATETIME,
    created DATETIME,
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id),
    FOREIGN KEY (customer_id) REFERENCES customers(id),
    FOREIGN KEY (location_id) REFERENCES locations(id)
);

CREATE TABLE delivery_orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    status VARCHAR(100),
    fee double, 
    deliverer VARCHAR(255),
    customer_id INT,
    retailer_employee_id INT,
    location_id INT,
    transaction_id INT,
    delivery_date DATETIME,
    modified DATETIME,
    created DATETIME,
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id),
    FOREIGN KEY (customer_id) REFERENCES customers(id),
    FOREIGN KEY (location_id) REFERENCES locations(id), 
    FOREIGN KEY (transaction_id) REFERENCES transactions(id)
);

CREATE TABLE items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    description VARCHAR(255),
    EPC VARCHAR(255) UNIQUE,
    status VARCHAR(100),
    product_id INT,
    section_id INT,
    location_id INT,
    FOREIGN KEY (location_id) REFERENCES locations(id),    
    FOREIGN KEY (product_id) REFERENCES products(id),
    FOREIGN KEY (section_id) REFERENCES sections(id)
);

CREATE TABLE delivery_orders_items (
    delivery_order_id INT,
    item_id INT,
    PRIMARY KEY (delivery_order_id, item_id),
    FOREIGN KEY (delivery_order_id) REFERENCES delivery_orders(id),
    FOREIGN KEY (item_id) REFERENCES items(id)
);

CREATE TABLE transfer_orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    locationFrom INT,
    locationTo INT,
    status VARCHAR(100),
    remarks VARCHAR(255),
    retailer_employee_id INT,
    supplier_id INT,
    created DATETIME,
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id),
    FOREIGN KEY (supplier_id) REFERENCES suppliers(id), 
    FOREIGN KEY (locationFrom) REFERENCES locations(id), 
    FOREIGN KEY (locationTo) REFERENCES locations(id)
);

CREATE TABLE transfer_orders_items (
    transfer_order_id INT,
    item_id INT, 
    PRIMARY KEY (transfer_order_id, item_id),
    FOREIGN KEY (transfer_order_id) REFERENCES transfer_orders(id),
    FOREIGN KEY (item_id) REFERENCES items(id)
);

CREATE TABLE reports (
    id INT AUTO_INCREMENT PRIMARY KEY,
    retailer_employee_id INT,
    entity VARCHAR(100),
    entityID int,
    title VARCHAR(100),
    message VARCHAR(255),
    status VARCHAR(100),
    modified DATETIME,
    created DATETIME,
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id)
);

CREATE TABLE transactions_items (
    transaction_id INT,
    item_id INT,
    PRIMARY KEY (transaction_id, item_id),
    FOREIGN KEY (transaction_id) REFERENCES transactions(id),
    FOREIGN KEY (item_id) REFERENCES items(id)
);

CREATE TABLE membership_points (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    pts INT,
    type VARCHAR(100),
    remarks VARCHAR(255),
    created DATETIME,
    retailer_employee_id INT,
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id), 
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

CREATE TABLE stock_levels (
    id INT AUTO_INCREMENT PRIMARY KEY,
    location_id INT,
    product_id INT,
    threshold INT,
    status VARCHAR(100),
    retailer_employee_id INT,
    created DATETIME,
    FOREIGN KEY (location_id) REFERENCES locations(id), 
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE feedbacks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    customer_first_name VARCHAR(255),
    customer_last_name VARCHAR(255),
    customer_contact VARCHAR(100),
    customer_email VARCHAR(255),
    message VARCHAR(255),
    status VARCHAR(100),
    modified DATETIME,
    created DATETIME,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

CREATE TABLE rfqs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    message VARCHAR(255),
    modified DATETIME,
    created DATETIME,
    end_date DATETIME,
    retailer_employee_id INT,
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id)    
);

CREATE TABLE rfqs_suppliers (
    rfq_id INT,
    supplier_id INT,
    PRIMARY KEY (rfq_id, supplier_id),
    FOREIGN KEY (rfq_id) REFERENCES rfqs(id),
    FOREIGN KEY (supplier_id) REFERENCES suppliers(id)
);

CREATE TABLE quotations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    rfq_id INT,
    supplier_id INT,
    file_name VARCHAR(255),
    file_path VARCHAR(255),
    comments VARCHAR(255),
    status VARCHAR(100),
    modified DATETIME,
    created DATETIME,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(id),
    FOREIGN KEY (rfq_id) REFERENCES rfqs(id)
);

CREATE TABLE coupons (
    id INT AUTO_INCREMENT PRIMARY KEY,
    passcode VARCHAR(255) NOT NULL UNIQUE,
    start_date DATETIME,
    end_date DATETIME,
    description VARCHAR(255),
    created DATETIME,
    retailer_employee_id INT,
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id)
);

CREATE TABLE app_notifications (
    id INT AUTO_INCREMENT PRIMARY KEY,
    message TEXT,
    status BOOLEAN,
    modified DATETIME,
    created DATETIME,
    retailer_employee_id INT,
    FOREIGN KEY (retailer_employee_id) REFERENCES retailer_employees(id)
);

CREATE TABLE shopping_carts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    quantity INT,
    customer_id INT,
    product_id INT,
    created DATETIME,    
    FOREIGN KEY (customer_id) REFERENCES customers(id), 
    FOREIGN KEY (product_id) REFERENCES products(id) 
);